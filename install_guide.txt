# 은퇴 설계 AI Agent MCP Server 설치 가이드

## 📋 목차
1. [시스템 요구사항](#시스템-요구사항)
2. [프로젝트 구조](#프로젝트-구조)
3. [설치 단계](#설치-단계)
4. [Claude Desktop 연동](#claude-desktop-연동)
5. [테스트 실행](#테스트-실행)
6. [사용 예시](#사용-예시)
7. [문제 해결](#문제-해결)

---

## 시스템 요구사항

- **Python**: 3.11 이상
- **운영체제**: Windows, macOS, Linux
- **필수 패키지**:
  - mcp >= 0.9.0
  - pydantic >= 2.0.0
  - numpy >= 1.24.0

---

## 프로젝트 구조

```
retirement-planning-mcp/
├── mcp_server_jeoklip/          # 적립메이트
│   ├── __init__.py
│   ├── __main__.py
│   └── server.py
├── mcp_server_tooja/             # 투자메이트
│   ├── __init__.py
│   ├── __main__.py
│   └── server.py
├── mcp_server_inchul/            # 인출메이트
│   ├── __init__.py
│   ├── __main__.py
│   └── server.py
├── tests/
│   ├── test_jeoklip.py
│   ├── test_tooja.py
│   └── test_inchul.py
├── requirements.txt
└── README.md
```

---

## 설치 단계

### 1. 프로젝트 폴더 생성

```bash
# 작업 디렉토리 생성
mkdir retirement-planning-mcp
cd retirement-planning-mcp
```

### 2. 가상환경 설정 (권장)

**Windows:**
```bash
python -m venv venv
venv\Scripts\activate
```

**macOS/Linux:**
```bash
python3 -m venv venv
source venv/bin/activate
```

### 3. 의존성 설치

```bash
pip install --upgrade pip
pip install mcp pydantic numpy
```

또는 requirements.txt 사용:
```bash
pip install -r requirements.txt
```

### 4. 서버 파일 구조 생성

각 서버별로 폴더를 만들고 파일을 생성합니다:

#### 적립메이트 (mcp_server_jeoklip)
```bash
mkdir mcp_server_jeoklip
cd mcp_server_jeoklip

# 파일 생성 (내용은 제공된 artifacts 참고)
touch __init__.py
touch __main__.py
touch server.py

cd ..
```

#### 투자메이트 (mcp_server_tooja)
```bash
mkdir mcp_server_tooja
cd mcp_server_tooja

touch __init__.py
touch __main__.py
touch server.py

cd ..
```

#### 인출메이트 (mcp_server_inchul)
```bash
mkdir mcp_server_inchul
cd mcp_server_inchul

touch __init__.py
touch __main__.py
touch server.py

cd ..
```

### 5. 각 파일에 코드 복사

앞서 생성한 artifacts의 코드를 각 파일에 복사합니다:

- `server.py`: 각 서버의 메인 로직
- `__init__.py`: 진입점 설정
- `__main__.py`: 실행 엔트리

---

## Claude Desktop 연동

### 1. Claude Desktop 설정 파일 위치

**macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`

**Windows**: `%APPDATA%\Claude\claude_desktop_config.json`

### 2. 설정 파일 편집

`claude_desktop_config.json` 파일을 열어 다음 내용을 추가합니다:

```json
{
  "mcpServers": {
    "jeoklip": {
      "command": "python",
      "args": ["-m", "mcp_server_jeoklip"],
      "cwd": "/절대/경로/to/retirement-planning-mcp",
      "env": {}
    },
    "tooja": {
      "command": "python",
      "args": ["-m", "mcp_server_tooja"],
      "cwd": "/절대/경로/to/retirement-planning-mcp",
      "env": {}
    },
    "inchul": {
      "command": "python",
      "args": ["-m", "mcp_server_inchul"],
      "cwd": "/절대/경로/to/retirement-planning-mcp",
      "env": {}
    }
  }
}
```

⚠️ **중요**: `/절대/경로/to/retirement-planning-mcp`를 실제 프로젝트 경로로 변경하세요.

**경로 확인 방법:**
```bash
# 프로젝트 폴더에서 실행
pwd  # macOS/Linux
cd   # Windows (현재 디렉토리 표시)
```

### 3. 가상환경 사용시 설정 (선택사항)

가상환경을 사용하는 경우, `python` 대신 가상환경의 python 경로를 사용:

```json
{
  "mcpServers": {
    "jeoklip": {
      "command": "/절대/경로/to/retirement-planning-mcp/venv/bin/python",
      "args": ["-m", "mcp_server_jeoklip"],
      "cwd": "/절대/경로/to/retirement-planning-mcp"
    }
  }
}
```

**Windows 가상환경 경로:**
```json
"command": "C:\\경로\\to\\retirement-planning-mcp\\venv\\Scripts\\python.exe"
```

### 4. Claude Desktop 재시작

설정 저장 후 Claude Desktop을 완전히 종료하고 다시 실행합니다.

---

## 테스트 실행

### 1. 개별 서버 수동 테스트

각 서버를 직접 실행하여 오류 확인:

```bash
# 적립메이트
python -m mcp_server_jeoklip

# 투자메이트
python -m mcp_server_tooja

# 인출메이트
python -m mcp_server_inchul
```

정상 작동시 서버가 대기 상태로 들어갑니다. `Ctrl+C`로 종료.

### 2. 단위 테스트 실행

```bash
# 테스트 폴더 생성
mkdir tests
cd tests

# 테스트 파일 복사 (제공된 test_*.py 파일들)

# 테스트 실행
python test_jeoklip.py
python test_tooja.py
python test_inchul.py
```

---

## 사용 예시

Claude Desktop에서 다음과 같이 질문할 수 있습니다:

### 적립메이트 사용 예시

```
안녕하세요. 은퇴 준비를 하고 싶은데 도와주세요.

현재 나이: 40세
목표 은퇴 나이: 65세
월 소득: 500만원
월 지출: 350만원
현재 자산:
- 예금: 5,000만원
- 펀드: 3,000만원
- 연금저축: 2,000만원

25년 후 은퇴할 때 얼마가 필요하고, 
지금부터 얼마나 저축해야 할까요?
```

### 투자메이트 사용 예시

```
은퇴를 위한 투자 포트폴리오를 만들고 싶어요.

나이: 45세
은퇴 목표: 60세
위험 성향: 중립적
보유 자산: 1억원
IRP, 연금저축 모두 활용 가능

보수적, 중립적, 공격적 포트폴리오를 
각각 추천해주세요.
```

### 인출메이트 사용 예시

```
65세에 은퇴했고 다음과 같은 상황입니다:

총 자산: 10억원
- 일반계좌: 4억원
- 연금계좌: 3억원
- 부동산: 3억원

국민연금: 월 100만원 (70세부터 수령)
필수 생활비: 월 250만원

어떻게 인출하는 것이 세금을 최소화하면서
자산을 오래 유지할 수 있을까요?
```

---

## 문제 해결

### 1. "ModuleNotFoundError: No module named 'mcp'"

**해결방법:**
```bash
pip install mcp
```

### 2. 서버가 Claude Desktop에서 보이지 않음

**체크리스트:**
- [ ] `claude_desktop_config.json` 경로가 올바른가?
- [ ] JSON 문법 오류가 없는가? (쉼표, 따옴표 확인)
- [ ] 절대 경로가 정확한가?
- [ ] Claude Desktop을 재시작했는가?

**확인 방법:**
```bash
# JSON 문법 검증
python -m json.tool claude_desktop_config.json
```

### 3. "Permission denied" 오류

**Windows:**
```bash
# 관리자 권한으로 실행
```

**macOS/Linux:**
```bash
chmod +x venv/bin/python
```

### 4. Import 오류

**해결방법:**
```bash
# 프로젝트 루트에서 실행
export PYTHONPATH="${PYTHONPATH}:$(pwd)"  # macOS/Linux
set PYTHONPATH=%PYTHONPATH%;%CD%          # Windows
```

### 5. 한글 인코딩 오류

**파일 저장시 UTF-8 인코딩 사용:**
- VS Code: 하단 바에서 "UTF-8" 선택
- 다른 에디터: "Save with Encoding" → UTF-8

### 6. numpy 설치 오류

**해결방법:**
```bash
# 특정 버전 설치
pip install numpy==1.24.0

# 또는 최신 버전
pip install --upgrade numpy
```

---

## 디버깅 팁

### 1. 서버 로그 확인

Claude Desktop 콘솔에서 로그 확인:
- **macOS**: `Console.app` 열기 → "Claude" 검색
- **Windows**: 이벤트 뷰어 확인

### 2. 수동 테스트

```bash
# MCP Inspector 사용 (개발자 도구)
npx @modelcontextprotocol/inspector python -m mcp_server_jeoklip
```

### 3. 자세한 에러 확인

각 서버 파일에 로깅 추가:

```python
import logging
logging.basicConfig(level=logging.DEBUG)
```

---

## 추가 설정

### Python 경로 확인

```bash
# 사용 중인 Python 경로 확인
which python    # macOS/Linux
where python    # Windows

# Python 버전 확인
python --version
```

### 패키지 설치 확인

```bash
pip list | grep mcp
pip list | grep pydantic
pip list | grep numpy
```

---

## 성능 최적화

### 1. 가상환경 사용 (권장)

가상환경을 사용하면 패키지 충돌을 방지하고 깨끗한 환경 유지:

```bash
python -m venv venv
source venv/bin/activate  # macOS/Linux
venv\Scripts\activate     # Windows
```

### 2. 캐싱 활용

자주 사용하는 계산 결과를 캐싱하여 성능 향상.

---

## 보안 고려사항

### 1. 개인정보 보호

- 사용자 데이터는 로컬에만 저장
- 외부 서버로 전송하지 않음
- 민감한 금융 정보 암호화 권장

### 2. 데이터 저장

현재 버전은 메모리에만 저장. 영구 저장을 원한다면:

```python
# CSV 저장 예시
import csv

def save_user_data(data):
    with open('user_data.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=data.keys())
        writer.writeheader()
        writer.writerow(data)
```

---

## 업데이트 및 유지보수

### 서버 업데이트

```bash
# Git 사용시
git pull origin main

# 수동 업데이트시
# 새 코드를 각 server.py 파일에 복사

# Claude Desktop 재시작
```

### 의존성 업데이트

```bash
pip install --upgrade mcp pydantic numpy
```

---

## FAQ

### Q1: 여러 서버를 동시에 사용할 수 있나요?

**A:** 네, Claude Desktop은 여러 MCP 서버를 동시에 로드할 수 있습니다. 설정 파일에 모두 추가하면 됩니다.

### Q2: 서버 응답이 느린데 어떻게 하나요?

**A:** 
- 복잡한 계산의 경우 numpy 최적화 사용
- 불필요한 로깅 제거
- 캐싱 구현

### Q3: 다른 사람과 공유할 수 있나요?

**A:** 
- 코드는 공유 가능
- 개인 금융 데이터는 공유하지 마세요
- GitHub 등에 올릴 때 .gitignore 설정 필요

### Q4: 계산 결과가 정확한가요?

**A:**
- 기본 금융 공식 사용
- 실제 투자 결정 전 전문가 상담 권장
- 교육 및 참고용으로 활용

### Q5: 오프라인에서도 작동하나요?

**A:** 네, 모든 계산이 로컬에서 이루어지므로 인터넷 연결 없이도 작동합니다.

---

## 다음 단계

### 1. 기능 확장

- 실제 시장 데이터 API 연동
- 그래프/차트 생성 기능
- PDF 보고서 생성

### 2. 데이터베이스 연동

```bash
pip install sqlite3
# SQLite로 사용자 데이터 영구 저장
```

### 3. 웹 인터페이스 추가

```bash
pip install fastapi uvicorn
# REST API 서버로 확장
```

---

## 참고 자료

- [MCP 공식 문서](https://modelcontextprotocol.io/)
- [Claude Desktop 설정 가이드](https://docs.anthropic.com/claude/docs)
- [Python 가상환경 가이드](https://docs.python.org/3/tutorial/venv.html)

---

## 라이선스 및 면책조항

이 소프트웨어는 교육 및 정보 제공 목적으로만 제공됩니다. 

**면책조항:**
- 실제 투자 결정 전 반드시 전문가와 상담하세요
- 제공된 계산은 참고용이며 보장되지 않습니다
- 개인의 재무 상황에 따라 결과가 다를 수 있습니다
- 저자는 사용으로 인한 손실에 대해 책임지지 않습니다

---

## 지원 및 문의

문제가 발생하거나 질문이 있으시면:

1. 먼저 [문제 해결](#문제-해결) 섹션 확인
2. GitHub Issues에 문제 보고
3. 상세한 에러 메시지와 환경 정보 포함

---

## 변경 이력

### v1.0.0 (2025-01-XX)
- 적립메이트 초기 출시
- 투자메이트 초기 출시
- 인출메이트 초기 출시
- 기본 금융 계산 엔진 구현

---

**설치 완료!** 이제 Claude Desktop에서 은퇴 설계 서비스를 사용할 수 있습니다.