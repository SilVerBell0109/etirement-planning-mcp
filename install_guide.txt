# 은퇴 설계 AI Agent MCP Server 설치 가이드 (python3/pip3 기준)

## 📋 목차
1. [시스템 요구사항](#시스템-요구사항)
2. [프로젝트 구조](#프로젝트-구조)
3. [설치 단계](#설치-단계)
4. [Claude Desktop 연동](#claude-desktop-연동)
5. [테스트 실행](#테스트-실행)
6. [사용 예시](#사용-예시)
7. [문제 해결](#문제-해결)

---

## 시스템 요구사항

- **Python**: 3.10 이상 (3.11 권장)
- **운영체제**: macOS, Linux, Windows
- **필수 패키지**:
  - mcp >= 0.9.0
  - pydantic >= 2.0.0
  - numpy >= 1.24.0

⚠️ **중요:** Python 3.9 이하는 지원하지 않습니다. (match-case 문법 사용)

---

## 프로젝트 구조

```
retirement-planning-mcp/
├── mcp_server_jeoklip/          # 적립메이트
│   ├── __init__.py
│   ├── __main__.py
│   └── server.py
├── mcp_server_tooja/             # 투자메이트
│   ├── __init__.py
│   ├── __main__.py
│   └── server.py
├── mcp_server_inchul/            # 인출메이트
│   ├── __init__.py
│   ├── __main__.py
│   └── server.py
├── tests/
│   ├── test_jeoklip.py
│   ├── test_tooja.py
│   └── test_inchul.py
├── requirements.txt
└── README.md
```

---

## 설치 단계

### 1. Python 버전 확인

```bash
# Python 버전 확인 (3.10 이상이어야 함)
python3 --version

# 3.9 이하라면 최신 버전 설치 필요
```

**Python 설치 (필요한 경우):**

**macOS (Homebrew):**
```bash
brew install python@3.11
```

**macOS (Conda):**
```bash
conda create -n retirement-mcp python=3.11 -y
conda activate retirement-mcp
```

**Ubuntu/Debian:**
```bash
sudo apt update
sudo apt install python3.11 python3-pip
```

### 2. 프로젝트 폴더 생성

```bash
# 작업 디렉토리 생성
mkdir retirement-planning-mcp
cd retirement-planning-mcp
```

### 3. 가상환경 설정 (Conda 사용 권장)

**Conda 환경 (권장):**
```bash
# Python 3.11 환경 생성
conda create -n retirement-mcp python=3.11 -y

# 환경 활성화
conda activate retirement-mcp

# Python 버전 확인
python3 --version  # 3.11.x 확인
```

**venv 사용 (대안):**
```bash
# Python 3.11로 가상환경 생성
python3.11 -m venv venv

# 활성화
source venv/bin/activate  # macOS/Linux
# 또는
venv\Scripts\activate     # Windows

# Python 버전 확인
python3 --version
```

### 4. 의존성 설치

```bash
# pip3 업그레이드
pip3 install --upgrade pip

# 필수 패키지 설치
pip3 install "mcp>=0.9.0"
pip3 install "pydantic>=2.0.0"
pip3 install "numpy>=1.24.0"

# 또는 한번에
pip3 install "mcp>=0.9.0" "pydantic>=2.0.0" "numpy>=1.24.0"
```

**requirements.txt 사용:**
```bash
# requirements.txt 파일 생성
cat > requirements.txt << EOF
mcp>=0.9.0
pydantic>=2.0.0
numpy>=1.24.0
EOF

# 설치
pip3 install -r requirements.txt
```

### 5. 설치 확인

```bash
# 설치된 패키지 확인
pip3 list | grep mcp
pip3 list | grep pydantic
pip3 list | grep numpy

# 임포트 테스트
python3 -c "import mcp; print('MCP:', mcp.__version__)"
python3 -c "import pydantic; print('Pydantic:', pydantic.__version__)"
python3 -c "import numpy; print('NumPy:', numpy.__version__)"

# 또는 한번에
python3 -c "import mcp, pydantic, numpy; print('✓ All packages installed!')"
```

### 6. 서버 파일 구조 생성

각 서버별로 폴더를 만들고 파일을 생성합니다:

#### A. 적립메이트 (mcp_server_jeoklip)

```bash
mkdir -p mcp_server_jeoklip
cd mcp_server_jeoklip

# 파일 생성
touch __init__.py
touch __main__.py
touch server.py

cd ..
```

각 파일에 제공된 코드 복사:
- `__init__.py`: Artifact `jeoklip_init`
- `__main__.py`: Artifact `jeoklip_main`
- `server.py`: Artifact `jeoklip_server`

#### B. 투자메이트 (mcp_server_tooja)

```bash
mkdir -p mcp_server_tooja
cd mcp_server_tooja

touch __init__.py
touch __main__.py
touch server.py

cd ..
```

각 파일에 제공된 코드 복사:
- `__init__.py`: Artifact `tooja_init`
- `__main__.py`: Artifact `tooja_main`
- `server.py`: Artifact `tooja_server`

#### C. 인출메이트 (mcp_server_inchul)

```bash
mkdir -p mcp_server_inchul
cd mcp_server_inchul

touch __init__.py
touch __main__.py
touch server.py

cd ..
```

각 파일에 제공된 코드 복사:
- `__init__.py`: Artifact `inchul_init`
- `__main__.py`: Artifact `inchul_main`
- `server.py`: Artifact `inchul_server`

### 7. 로컬 테스트

```bash
# 프로젝트 루트에서 각 서버 테스트
python3 -m mcp_server_jeoklip  # Ctrl+C로 종료
python3 -m mcp_server_tooja    # Ctrl+C로 종료
python3 -m mcp_server_inchul   # Ctrl+C로 종료
```

정상 작동시 서버가 대기 상태로 들어갑니다.

---

## Claude Desktop 연동

### 1. 설정 파일 위치

**macOS:**
```bash
~/Library/Application Support/Claude/claude_desktop_config.json
```

**Windows:**
```
%APPDATA%\Claude\claude_desktop_config.json
```

**Linux:**
```bash
~/.config/Claude/claude_desktop_config.json
```

### 2. 프로젝트 절대 경로 확인

```bash
# 프로젝트 루트에서 실행
pwd

# 출력 예시:
# /Users/silverbell/retirement-planning-mcp
```

이 경로를 복사해두세요!

### 3. Python3 경로 확인

```bash
# 사용 중인 python3 경로 확인
which python3

# Conda 환경 사용시:
# /opt/anaconda3/envs/retirement-mcp/bin/python3
# 
# Homebrew Python:
# /opt/homebrew/bin/python3
#
# 시스템 Python:
# /usr/bin/python3
```

### 4. 설정 파일 편집

`claude_desktop_config.json` 파일을 열어 다음 내용 추가:

**방법 1: python3 명령 사용 (간단)**

```json
{
  "mcpServers": {
    "jeoklip": {
      "command": "python3",
      "args": ["-m", "mcp_server_jeoklip"],
      "cwd": "/Users/silverbell/retirement-planning-mcp"
    },
    "tooja": {
      "command": "python3",
      "args": ["-m", "mcp_server_tooja"],
      "cwd": "/Users/silverbell/retirement-planning-mcp"
    },
    "inchul": {
      "command": "python3",
      "args": ["-m", "mcp_server_inchul"],
      "cwd": "/Users/silverbell/retirement-planning-mcp"
    }
  }
}
```

**방법 2: 절대 경로 사용 (권장 - 더 안정적)**

```json
{
  "mcpServers": {
    "jeoklip": {
      "command": "/opt/anaconda3/envs/retirement-mcp/bin/python3",
      "args": ["-m", "mcp_server_jeoklip"],
      "cwd": "/Users/silverbell/retirement-planning-mcp"
    },
    "tooja": {
      "command": "/opt/anaconda3/envs/retirement-mcp/bin/python3",
      "args": ["-m", "mcp_server_tooja"],
      "cwd": "/Users/silverbell/retirement-planning-mcp"
    },
    "inchul": {
      "command": "/opt/anaconda3/envs/retirement-mcp/bin/python3",
      "args": ["-m", "mcp_server_inchul"],
      "cwd": "/Users/silverbell/retirement-planning-mcp"
    }
  }
}
```

⚠️ **중요:**
- `command`에 `which python3`로 확인한 경로 입력
- `cwd`에 `pwd`로 확인한 프로젝트 절대 경로 입력

### 5. JSON 문법 검증

```bash
# JSON 파일 문법 확인
python3 -m json.tool ~/Library/Application\ Support/Claude/claude_desktop_config.json

# 오류가 없으면 올바른 JSON
```

### 6. Claude Desktop 재시작

1. Claude Desktop **완전 종료** (Cmd+Q on Mac)
2. 다시 시작
3. 새 대화 시작

---

## 테스트 실행

### 1. 서버 개별 테스트

```bash
# 프로젝트 루트에서
cd ~/retirement-planning-mcp

# 각 서버 테스트 (Ctrl+C로 종료)
python3 -m mcp_server_jeoklip
python3 -m mcp_server_tooja
python3 -m mcp_server_inchul
```

### 2. 단위 테스트 실행 (선택사항)

```bash
# tests 폴더 생성
mkdir -p tests

# 테스트 파일 생성 및 실행
python3 tests/test_jeoklip.py
python3 tests/test_tooja.py
python3 tests/test_inchul.py
```

---

## 사용 예시

Claude Desktop에서 다음과 같이 질문:

### 적립메이트

```
안녕하세요. 은퇴 준비를 하고 싶은데 도와주세요.

현재 나이: 40세
목표 은퇴 나이: 65세
월 소득: 500만원
월 지출: 350만원
현재 자산:
- 예금: 5,000만원
- 펀드: 3,000만원
- 연금저축: 2,000만원

25년 후 은퇴할 때 얼마가 필요하고, 
지금부터 얼마나 저축해야 할까요?
```

### 투자메이트

```
은퇴를 위한 투자 포트폴리오를 만들고 싶어요.

나이: 45세
은퇴 목표: 60세
위험 성향: 중립적
보유 자산: 1억원
IRP, 연금저축 모두 활용 가능

보수적, 중립적, 공격적 포트폴리오를 
각각 추천해주세요.
```

### 인출메이트

```
65세에 은퇴했고 다음과 같은 상황입니다:

총 자산: 10억원
- 일반계좌: 4억원
- 연금계좌: 3억원
- 부동산: 3억원

국민연금: 월 100만원 (70세부터 수령)
필수 생활비: 월 250만원

어떻게 인출하는 것이 세금을 최소화하면서
자산을 오래 유지할 수 있을까요?
```

---

## 문제 해결

### 1. "ModuleNotFoundError: No module named 'mcp'"

**원인:** mcp 패키지가 설치되지 않음

**해결:**
```bash
pip3 install mcp
```

### 2. "SyntaxError: invalid syntax" (match 구문)

**원인:** Python 3.9 이하 버전 사용

**해결:**
```bash
# Python 버전 확인
python3 --version

# 3.9 이하라면 3.11로 업그레이드
conda create -n retirement-mcp python=3.11 -y
conda activate retirement-mcp
```

### 3. 서버가 Claude Desktop에서 보이지 않음

**체크리스트:**
- [ ] Python 3.10 이상 사용 중인가?
- [ ] `claude_desktop_config.json` 경로가 올바른가?
- [ ] JSON 문법 오류가 없는가?
- [ ] `cwd` 경로가 절대경로인가?
- [ ] `command`의 python3 경로가 올바른가?
- [ ] Claude Desktop을 재시작했는가?

**확인 방법:**
```bash
# 1. Python 경로 확인
which python3

# 2. 프로젝트 경로 확인
pwd

# 3. JSON 검증
python3 -m json.tool claude_desktop_config.json

# 4. 서버 직접 실행 테스트
python3 -m mcp_server_jeoklip
```

### 4. Import 오류

**해결:**
```bash
# PYTHONPATH 설정
export PYTHONPATH="${PYTHONPATH}:$(pwd)"  # macOS/Linux

# 또는 프로젝트 루트에서 실행
cd ~/retirement-planning-mcp
python3 -m mcp_server_jeoklip
```

### 5. Conda 환경 활성화 안됨

```bash
# Conda 초기화
conda init bash  # 또는 zsh

# 쉘 재시작
source ~/.bashrc  # 또는 ~/.zshrc

# 환경 활성화
conda activate retirement-mcp
```

### 6. pip3와 python3 버전 불일치

```bash
# python3과 pip3가 같은 버전인지 확인
python3 --version
pip3 --version

# 다르다면 python3 -m pip 사용
python3 -m pip install mcp pydantic numpy
```

---

## 환경 변수 설정 (선택사항)

영구적으로 환경 설정:

**~/.zshrc 또는 ~/.bashrc에 추가:**

```bash
# Conda 환경 자동 활성화
# conda activate retirement-mcp

# 프로젝트 경로 단축키
alias retirement="cd ~/retirement-planning-mcp && conda activate retirement-mcp"

# 빠른 테스트
alias test-jeoklip="python3 -m mcp_server_jeoklip"
alias test-tooja="python3 -m mcp_server_tooja"
alias test-inchul="python3 -m mcp_server_inchul"
```

적용:
```bash
source ~/.zshrc  # 또는 ~/.bashrc
```

---

## 업데이트

### 패키지 업데이트

```bash
# 환경 활성화
conda activate retirement-mcp

# 패키지 업데이트
pip3 install --upgrade mcp pydantic numpy
```

### 코드 업데이트

```bash
# Git 사용시
git pull origin main

# 수동 업데이트시
# 새 server.py 코드를 복사

# Claude Desktop 재시작
```

---

## 완전 설치 체크리스트

- [ ] Python 3.10+ 설치 확인
- [ ] Conda 환경 생성 (retirement-mcp)
- [ ] 환경 활성화
- [ ] pip3로 mcp, pydantic, numpy 설치
- [ ] 3개 서버 폴더 생성
- [ ] 각 폴더에 3개 파일 작성
- [ ] python3 -m 테스트 성공
- [ ] which python3로 경로 확인
- [ ] pwd로 프로젝트 경로 확인
- [ ] claude_desktop_config.json 수정
- [ ] JSON 문법 검증
- [ ] Claude Desktop 재시작
- [ ] 테스트 질문으로 확인

---

## 추가 리소스

- [MCP 공식 문서](https://modelcontextprotocol.io/)
- [Pydantic 문서](https://docs.pydantic.dev/)
- [NumPy 문서](https://numpy.org/doc/)

---

**설치 완료!** 이제 Claude Desktop에서 은퇴 설계 서비스를 사용할 수 있습니다.

문제가 발생하면 위의 [문제 해결](#문제-해결) 섹션을 참고하세요.
